#include <jni.h>
#include <string>
#include <GLES3/gl3.h>
#include <android/log.h>
#include <stdlib.h>
#include <math.h>

#define LOG_TAG "NATIVE-LIB"
#define ALOGE(...) __android_log_print(ANDROID_LOG_ERROR, LOG_TAG, __VA_ARGS__)

static const char VERTEX_SHADER[]=
        "#version 300 es\n"
        "layout(location = 0) in vec4 vPosition;\n"
        "void main(){\n"
        "gl_Position = vPosition;\n"
        "}\n";
static const char FRAGMENT_SHADER[]=
        "#version 300 es\n"
        "precision mediump float;\n"
        "out vec4 fragColor;\n"
        "void main(){\n"
        "fragColor = vec4(1.0,0.0,0.0,1.0);\n"
        "}\n";
static const GLfloat VERTEX[]={1
        -0.5f,-0.5f,0.0f,
        0.5f,-0.5f,0.0f,
        0.0f,0.5f,0.0f,
        1.0f,0.5f,0.0f,
};
bool checkGlError(const char* funcName) {
    GLint err = glGetError();
    if (err != GL_NO_ERROR) {
        ALOGE("GL error after %s(): 0x%08x\n", funcName, err);
        return true;
    }
    return false;
}

GLuint program;

GLuint createShader(GLenum shaderType, const char* src) {
    GLuint shader = glCreateShader(shaderType);
    if (!shader) {
        checkGlError("glCreateShader");
        return 0;
    }
    glShaderSource(shader, 1, &src, NULL);
    GLint compiled = GL_FALSE;
    glCompileShader(shader);
    glGetShaderiv(shader, GL_COMPILE_STATUS, &compiled);
    if (!compiled) {
        GLint infoLogLen = 0;
        glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &infoLogLen);
        if (infoLogLen > 0) {
            GLchar* infoLog = (GLchar*)malloc(infoLogLen);
            if (infoLog) {
                glGetShaderInfoLog(shader, infoLogLen, NULL, infoLog);
                ALOGE("Could not compile %s shader:\n%s\n",
                      shaderType == GL_VERTEX_SHADER ? "vertex" : "fragment",
                      infoLog);
                free(infoLog);
            }
        }
        glDeleteShader(shader);
        return 0;
    }
    return shader;
}
GLuint createProgram(const char* vtxSrc, const char* fragSrc) {
    GLuint vtxShader = 0;
    GLuint fragShader = 0;
    GLuint program = 0;
    GLint linked = GL_FALSE;
    vtxShader = createShader(GL_VERTEX_SHADER, vtxSrc);
    if (!vtxShader)
        goto exit;
    fragShader = createShader(GL_FRAGMENT_SHADER, fragSrc);
    if (!fragShader)
        goto exit;
    program = glCreateProgram();
    if (!program) {
        checkGlError("glCreateProgram");
        goto exit;
    }
    glAttachShader(program, vtxShader);
    glAttachShader(program, fragShader);
    glLinkProgram(program);
    glGetProgramiv(program, GL_LINK_STATUS, &linked);
    if (!linked) {
        ALOGE("Could not link program");
        GLint infoLogLen = 0;
        glGetProgramiv(program, GL_INFO_LOG_LENGTH, &infoLogLen);
        if (infoLogLen) {
            GLchar* infoLog = (GLchar*)malloc(infoLogLen);
            if (infoLog) {
                glGetProgramInfoLog(program, infoLogLen, NULL, infoLog);
                ALOGE("Could not link program:\n%s\n", infoLog);
                free(infoLog);
            }
        }
        glDeleteProgram(program);
        program = 0;
    }
    exit:
    glDeleteShader(vtxShader);
    glDeleteShader(fragShader);
    return program;
}

GLuint VBO,VAO,EBO;
float sphereVertices [] = {};
void createSphere() {
    glGenBuffers(1, &VBO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(VERTEX), VERTEX, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);
    glDrawArrays(GL_TRIANGLE_STRIP,0,4);
}


void getSphereVertex () {
    for (float phi = phi_start+ step_size; phi < phi_end-1e-5; phi += step_size)
    {
        float cos_phi = cosf(phi);

        float sin_phi = sinf(phi);

        for (float theta = 0.f; theta < theta_end+1e-5f; theta += step_size)
        {
            float cos_theta = cosf(theta);
            float sin_theta = sinf(theta);
            vec_ver.push_back(Vertex(Vector3f<float>(cos_theta*cos_phi, sin_phi, sin_theta*cos_phi),Vector2f<float>(theta*pi2_inverse, phi*pi_inverse + 0.5f)));
        }
    }
}

extern "C" JNIEXPORT jstring JNICALL
Java_com_liubao_gl_MainActivity_stringFromJNI(
        JNIEnv *env,
        jobject /* this */) {
    std::string hello = "Hello from C++";
    return env->NewStringUTF(hello.c_str());
}

extern "C" JNIEXPORT jboolean JNICALL
Java_com_liubao_gl_GLNativeRender_nativeInit(
        JNIEnv *env,
        jclass type
        ){
    program = createProgram(VERTEX_SHADER, FRAGMENT_SHADER);
    if (!program){
        ALOGE("程序创建失败");
        return JNI_FALSE;
    }
    glClearColor(0,0,0,0);
    return JNI_TRUE;
}

extern "C" JNIEXPORT void JNICALL
Java_com_liubao_gl_GLNativeRender_nativeDrawFrame(
        JNIEnv *env,
        jclass type
        ) {
    glClear(GL_COLOR_BUFFER_BIT);
    glUseProgram(program);
    createSphere();
//    glVertexAttribPointer(0,3,GL_FLOAT,GL_FALSE,0,VERTEX);
//    glEnableVertexAttribArray(0);
//    glDrawArrays(GL_TRIANGLES,0,3);
}

extern "C" JNIEXPORT void JNICALL
Java_com_liubao_gl_GLNativeRender_nativeResize (
        JNIEnv* env,
        jclass type,
        jint width,
        jint height
        ){
    glViewport(0, 0, width, height);
    glClear(GL_COLOR_BUFFER_BIT);
}

extern "C" JNIEXPORT void JNICALL
Java_com_liubao_gl_GLNativeRender_nativeDispatchEvent(
        JNIEnv* env,
        jclass type,
        jfloat x,
        jfloat y
        ){
    ALOGE("touch x:", x);
    ALOGE("touch y:", y);
}
